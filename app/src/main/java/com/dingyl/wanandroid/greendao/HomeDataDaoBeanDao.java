package com.dingyl.wanandroid.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dingyl.wanandroid.data.HomeDataDaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_DATA_DAO_BEAN".
*/
public class HomeDataDaoBeanDao extends AbstractDao<HomeDataDaoBean, Long> {

    public static final String TABLENAME = "HOME_DATA_DAO_BEAN";

    /**
     * Properties of entity HomeDataDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property PublishTime = new Property(2, String.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property RootTitle = new Property(4, String.class, "rootTitle", false, "ROOT_TITLE");
        public final static Property IsProject = new Property(5, String.class, "isProject", false, "IS_PROJECT");
        public final static Property IsLove = new Property(6, boolean.class, "isLove", false, "IS_LOVE");
    }


    public HomeDataDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeDataDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_DATA_DAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"AUTHOR\" TEXT," + // 1: author
                "\"PUBLISH_TIME\" TEXT," + // 2: publishTime
                "\"CONTENT\" TEXT," + // 3: content
                "\"ROOT_TITLE\" TEXT," + // 4: rootTitle
                "\"IS_PROJECT\" TEXT," + // 5: isProject
                "\"IS_LOVE\" INTEGER NOT NULL );"); // 6: isLove
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_DATA_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeDataDaoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindString(3, publishTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String rootTitle = entity.getRootTitle();
        if (rootTitle != null) {
            stmt.bindString(5, rootTitle);
        }
 
        String isProject = entity.getIsProject();
        if (isProject != null) {
            stmt.bindString(6, isProject);
        }
        stmt.bindLong(7, entity.getIsLove() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeDataDaoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindString(3, publishTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String rootTitle = entity.getRootTitle();
        if (rootTitle != null) {
            stmt.bindString(5, rootTitle);
        }
 
        String isProject = entity.getIsProject();
        if (isProject != null) {
            stmt.bindString(6, isProject);
        }
        stmt.bindLong(7, entity.getIsLove() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HomeDataDaoBean readEntity(Cursor cursor, int offset) {
        HomeDataDaoBean entity = new HomeDataDaoBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // publishTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rootTitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isProject
            cursor.getShort(offset + 6) != 0 // isLove
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeDataDaoBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPublishTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRootTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsProject(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsLove(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeDataDaoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeDataDaoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeDataDaoBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
