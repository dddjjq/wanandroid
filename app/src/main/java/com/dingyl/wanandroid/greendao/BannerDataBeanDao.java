package com.dingyl.wanandroid.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dingyl.wanandroid.data.BannerDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANNER_DATA_BEAN".
*/
public class BannerDataBeanDao extends AbstractDao<BannerDataBean, Void> {

    public static final String TABLENAME = "BANNER_DATA_BEAN";

    /**
     * Properties of entity BannerDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Desc = new Property(0, String.class, "desc", false, "DESC");
        public final static Property AnotherId = new Property(1, int.class, "anotherId", false, "ANOTHER_ID");
        public final static Property ImagePath = new Property(2, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property IsVisible = new Property(3, int.class, "isVisible", false, "IS_VISIBLE");
        public final static Property Order = new Property(4, int.class, "order", false, "ORDER");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
    }


    public BannerDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BannerDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANNER_DATA_BEAN\" (" + //
                "\"DESC\" TEXT," + // 0: desc
                "\"ANOTHER_ID\" INTEGER NOT NULL ," + // 1: anotherId
                "\"IMAGE_PATH\" TEXT," + // 2: imagePath
                "\"IS_VISIBLE\" INTEGER NOT NULL ," + // 3: isVisible
                "\"ORDER\" INTEGER NOT NULL ," + // 4: order
                "\"TITLE\" TEXT," + // 5: title
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"URL\" TEXT);"); // 7: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANNER_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BannerDataBean entity) {
        stmt.clearBindings();
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(1, desc);
        }
        stmt.bindLong(2, entity.getAnotherId());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(3, imagePath);
        }
        stmt.bindLong(4, entity.getIsVisible());
        stmt.bindLong(5, entity.getOrder());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
        stmt.bindLong(7, entity.getType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BannerDataBean entity) {
        stmt.clearBindings();
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(1, desc);
        }
        stmt.bindLong(2, entity.getAnotherId());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(3, imagePath);
        }
        stmt.bindLong(4, entity.getIsVisible());
        stmt.bindLong(5, entity.getOrder());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
        stmt.bindLong(7, entity.getType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BannerDataBean readEntity(Cursor cursor, int offset) {
        BannerDataBean entity = new BannerDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // desc
            cursor.getInt(offset + 1), // anotherId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imagePath
            cursor.getInt(offset + 3), // isVisible
            cursor.getInt(offset + 4), // order
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BannerDataBean entity, int offset) {
        entity.setDesc(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAnotherId(cursor.getInt(offset + 1));
        entity.setImagePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsVisible(cursor.getInt(offset + 3));
        entity.setOrder(cursor.getInt(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BannerDataBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BannerDataBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(BannerDataBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
